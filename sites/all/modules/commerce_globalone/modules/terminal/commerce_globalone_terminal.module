<?php 


/**
 * Implements hook_menu().
 */
function commerce_globalone_terminal_menu() {
  $payment_method = commerce_payment_method_instance_load('globalone|commerce_payment_globalone');
  $path = !empty($payment_method['settings']['terminal']['terminal_path']) ? $payment_method['settings']['terminal']['terminal_path'] : 'terminal';
  $items = array();
  $items[$path] = array(
    'title' => 'GlobalONE Terminal',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('commerce_globalone_terminal_form'),
    'access callback' => TRUE,
    'type' => MENU_NORMAL_ITEM,
  );

  return $items;
}

/**
 * Load all enabled globalone paymnet method instanses.
 */
function _commerce_globalone_terminal_globalone_payment_methods() {
  $fake_order = new stdClass();
  $fake_order->payment_methods = array();
  rules_invoke_all('commerce_payment_methods', $fake_order);
  $commerce_payment_methods = $fake_order->payment_methods;
  $globalone_methods = array();
  foreach ($commerce_payment_methods as $id =>  $method) {
    if (strpos($id, 'globalone|') !== FALSE) {
      if ($method['settings']['mode'] == 'live') {
        $currency = $method['settings']['live']['currency'];
      }
      else {
        switch ($method['settings']['test']['terminal_id']) {
        case '33001':
          $currency = 'USD';
          break; 
        case '33002':
          $currency = 'CAD';
          break; 
        case '33003':
          $currency = 'EUR';
          break; 
        case '33004':
          $currency = 'GBP';
          break; 
        case '36001':
          $currency = 'MCP';
          break; 
        }
      }
      $rule = rules_config_load($method['rule_name']);
      $globalone_methods[$id] = "$currency: $rule->label"; 
    } 
  }

  return $globalone_methods;


}

/**
 * Implements hook_commerce_order_status_info().
 */
function commerce_globalone_terminal_commerce_order_status_info() {
  return array(
    'globalone_terminal' => array(
      'name' => 'globalone_terminal_completed',
      'title' => t('GlobalONE terminal completed'),
      'state' => 'completed',
    ),

  );

}

/**
 * Implements hook_commerce_line_item_type_info().
 */
function commerce_globalone_terminal_commerce_line_item_type_info() {

  $line_item_types = array();

  $line_item_types['globalone_terminal'] = array(
    'name' => t('GlobalONE Terminal'),
    'description' => t('This line item is globalone.'),
    'product' => FALSE,
  );

  return $line_item_types;

}


/**
 * GlobalONE callback.
 */
function commerce_globalone_terminal_form($form, &$form_state) {
  // Ensure this include file is loaded when the form is rebuilt from the cache.
  //$form_state['build_info']['files']['form'] = drupal_get_path('module', 'commerce_payment') . '/includes/commerce_payment.forms.inc';
  if (empty($form_state['order'])) {
    global $user;
    $order = commerce_order_new($user->uid, 'globalone_terminal_completed');
    $form_state['order'] = $order;
  }
  else {
    $order = $form_state['order'];
  }
  $default_currency_code = commerce_default_currency();
  $form['payment_terminal'] = array(
    '#type' => 'fieldset',
    '#title' => t('Payment terminal: GlobalOne'),
    '#attributes' => array('class' => array('payment-terminal')),
  );
  $form['payment_terminal']['amount'] = array(
    '#type' => 'textfield',
    '#title' => t('Amount'),
    '#required' => TRUE,
    '#default_value' => '0.00',
    '#size' => 10,
    '#prefix' => '<div class="container-inline payment-terminal-amount">',
  ); 

  // Build a currency options list from all enabled currencies.
  $options = array();

  foreach (commerce_currencies(TRUE) as $currency_code => $currency) {
    $options[$currency_code] = check_plain($currency['code']);
  }
  $form['payment_terminal']['currency_code'] = array(
    '#type' => 'select',
    '#options' => $options,
    '#default_value' => $default_currency_code,
    '#prefix' => '<span id="replace_currency">',
    '#suffix' => '</span></div>',
  );
  $globalone_payment_methods = _commerce_globalone_terminal_globalone_payment_methods();
  if (!empty($form_state['values']['payment_method'])) {
    $payment_method_label = $globalone_payment_methods[$form_state['values']['payment_method']];
  }
  else {
    $payment_method_label = reset($globalone_payment_methods);
  }
  $payment_currency = explode(':', $payment_method_label);
  $payment_currency = reset($payment_currency);
  if ($payment_currency != 'MCP') {
    $form['payment_terminal']['currency_code']['#disabled'] = TRUE;
  }
  $form['payment_terminal']['currency_code']['#value'] = $payment_currency;
  $form['payment_terminal']['payment_method'] = array(
    '#type' => 'select',
    '#title' => t('Payment method'),
    '#options' => $globalone_payment_methods,
    '#ajax' => array(
      'callback' => 'globalone_terminal_terminal_callback',
      'wrapper' => 'replace_currency',
    ),
  ); 
  $form['payment_terminal']['description'] = array(
    '#type' => 'textfield',
    '#title' => t('Description'),
  ); 
  $terminal_values = !empty($form_state['values']['payment_details']) ? $form_state['values']['payment_details'] : array();
  $form['payment_terminal']['payment_details'] = commerce_globalone_cc_submit_form($terminal_values, NULL, $order, TRUE);
  $form['payment_terminal']['payment_details']['#tree'] = TRUE;
  $form['submit'] = array(
    '#type' => 'submit',
    '#name' => 'cc_submit',
    '#value' => t('Processs'),
  );
  return $form;
}

function globalone_terminal_terminal_callback($form, $form_state) {
  return $form['payment_terminal']['currency_code'];

}
function commerce_globalone_terminal_form_validate($form, &$form_state) {
  //$form_state['rebuild'] = TRUE;
  $order = $form_state['order'];
  // commerce_globalone_cc_submit_form_validate('globalone', $form['payment_terminal']['payment_details'], $form_state['values']['payment_details'], $order, array('payment_details'));

}


function commerce_globalone_terminal_add_line_item_to_order($order, $charge, $title) {
  $line_item = entity_create('commerce_line_item', array(
    'type' => 'globalone_terminal', 
    'order_id' => $order->order_id, 
    'quantity' => 1,
    'line_item_label' => $title,
  ));


  $line_item->commerce_unit_price = array(
    'und' => array(
      '0' => $charge,
    )
  );

  $line_item_wrapper = entity_metadata_wrapper('commerce_line_item', $line_item);

  if (!is_null($line_item_wrapper->commerce_unit_price->value())) {
    // Add the base price to the components array.
    if (!commerce_price_component_load($line_item_wrapper->commerce_unit_price->value(), 'base_price')) {
      $line_item_wrapper->commerce_unit_price->data = commerce_price_component_add(
        $line_item_wrapper->commerce_unit_price->value(), 
        'base_price', 
        $line_item_wrapper->commerce_unit_price->value(), 
        TRUE
      );
    }
  }
  $line_item_wrapper->save();
  $order_wrapper = entity_metadata_wrapper('commerce_order', $order);
  $order_wrapper->commerce_line_items[] = $line_item;
  $order_wrapper->save();

}
function commerce_globalone_terminal_form_submit($form, &$form_state) {
  $order = $form_state['order'];
  commerce_order_save($order);


  // Explode variables from form_state values array.
  extract($form_state['values']);

  $charge = array(
    'amount' => commerce_currency_decimal_to_amount($amount, $currency_code),
    'currency_code' => $currency_code,
  );
  $description = empty($description) ? t('GlobalONE Terminal') : $description;

  commerce_globalone_terminal_add_line_item_to_order($order, $charge, $description);

  // maybe move to validation
  // Load payment method instance info into same $payment_method.
  $payment_method = commerce_payment_method_instance_load($payment_method);


  $details_form = !empty($form['payment_terminal']['payment_details']) ? $form['payment_terminal']['payment_details'] : array();
  $details_values = !empty($payment_details) ? $payment_details : array();
  $result = commerce_globalone_cc_submit_form_submit($payment_method, $details_form, $details_values, $order, $charge, $description);
}
