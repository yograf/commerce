<?php

/**
 * @file
 * Implements GlobalOne payment services for use in Drupal Commerce.
 */



/**
 * Implements hook_menu().
 */
function commerce_globalone_menu() {
  $items = array();


  return $items;
}


/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_globalone_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['globalone'] = array(
    'base' => 'commerce_globalone_cc',
    'title' => t('GlobalONE - Credit Card'),
    'short_title' => t('GlobalONE CC'),
    'display_title' => t('Credit card'),
    'description' => t('Integrates GlobalONE CC transactions.'),
  );

  return $payment_methods;
}

/**
 * Payment method callback: settings form.
 */
function commerce_globalone_cc_settings_form($settings = NULL) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  $form = array();

  $form['login'] = array(
    '#type' => 'textfield',
    '#title' => t('API Login ID'),
    '#description' => t('Your API Login ID is different from the username you use to login to your Authorize.Net account. Once you login, browse to your Account tab and click the <em>API Login ID and Transaction Key</em> link to find your API Login ID. If you are using a new Authorize.Net account, you may still need to generate an ID.'),
    // '#default_value' => $settings['login'],
    '#required' => TRUE,
  );
  return $form;
}

/**
 * Payment method callback: checkout form.
 */
function commerce_globalone_cc_submit_form($payment_method, $pane_values, $checkout_pane, $order, $owner = FALSE) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Prepare the fields to include on the credit card form.
  $fields = array(
    'code' => '',
  );
  // Add owner field if set $owner to true.
  if ($owner) {
    $fields['owner'] = '';
  }

  // Add the credit card types array if necessary.
  if (isset($payment_method['settings']['card_types'])) {
    $card_types = array_diff(array_values($payment_method['settings']['card_types']), array(0));

    if (!empty($card_types)) {
      $fields['type'] = $card_types;
    }
  }

  return commerce_payment_credit_card_form($fields);
}

/**
 * Payment method callback: checkout form validation.
 */
function commerce_globalone_cc_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {

  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Validate the credit card fields.
  $settings = array(
    'form_parents' => array_merge($form_parents, array('credit_card')),
  );

  if (!commerce_payment_credit_card_validate($pane_values['credit_card'], $settings)) {
    return FALSE;
  }
}

function commerce_globalone_new_transaction($transaction_data) {

    $transaction = commerce_payment_transaction_new('globalone', $transaction_data['order_id']);
    $transaction->instance_id = $transaction_data['payment_method']['instance_id'];
    $transaction->remote_id = 'dd';
    $transaction->amount = $transaction_data['charge']['amount'];
    $transaction->currency_code = $transaction_data['charge']['currency_code'];
    $transaction->payload[REQUEST_TIME] = 'dfd';

      $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
    // Store the type of transaction in the remote status.
    $transaction->remote_status = 'asdfds';

    // Build a meaningful response message.
    $message = array(
      'message',
    );

    $transaction->message = implode('<br />', $message);

    // Save the transaction information.
    commerce_payment_transaction_save($transaction);

}

/**
 * Payment method callback: checkout form submission.
 */
function commerce_globalone_cc_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge = NULL) {
  $payment_settings = $payment_method['settings'];
  $credit_card = $pane_values['credit_card'];
  // Format order total for transaction.
  if (!isset($charge)) {
    $wrapper = entity_metadata_wrapper('commerce_order', $order);
    $charge = commerce_line_items_total($wrapper->commerce_line_items);
  }
  

  $params['ORDERID'] = $order->order_id;
  $params['AMOUNT'] = $charge['amount'];
  $params['CURRENCY'] = $charge['currency_code'];
  $params['CARDNUMBER'] = $credit_card['number'];
  $params['CARDHOLDERNAME'] = $credit_card['owner'];
  $params['MONTH'] = $credit_card['exp_month'];
  $params['YEAR'] = $credit_card['exp_year'];
  $params['CVV'] = $credit_card['code'];
  $globalone_post = new CommerceGlobalonePost('https://testpayments.globalone.me/merchant/xmlpayment', $params);
  $r = $globalone_post->sendPayment();
  dpm($r);





  $transaction = array(
    'charge' => $charge,
    'payment_method' => $payment_method,
    'order_id' => $order->order_id,
  );
  commerce_globalone_new_transaction($transaction);
  //'amount' => number_format(commerce_currency_amount_to_decimal($charge['amount'], $charge['currency_code']), 2, '.', ''),




}
