<?php

/**
 * @file
 * Implements GlobalOne payment services for use in Drupal Commerce.
 */

define('GLOBALONE_TEST_URL', 'https://testpayments.globalone.me/merchant/xmlpayment');
define('GLOBALONE_LIVE_URL', 'https://payments.globalone.me/merchant/xmlpayment');




/**
 * Implements hook_commerce_payment_method_info().
 */
function commerce_globalone_commerce_payment_method_info() {
  $payment_methods = array();

  $payment_methods['globalone'] = array(
    'base' => 'commerce_globalone_cc',
    'title' => t('GlobalONE - Credit Card'),
    'short_title' => t('GlobalONE CC'),
    'display_title' => t('Credit card'),
    'description' => t('Integrates GlobalONE CC transactions.'),
  );

  return $payment_methods;
}

/**
 * GlobalONE default settings.
 */
function commerce_globalone_cc_default_settings() {
  return array(
    'mode' => 'test',
    'terminal' => array(
      'terminal_path' => 'estore/terminal',
    ),
    'live' => array(
      'currency' => '',
      'terminal_id' => '',
      'secret' => '',
    ),
    'test' => array(
      'terminal_id' => '33001',
    ),
    'card_types' => array(),
    'log' => array('request' => '0', 'response' => '0'),
  );
}

/**
 * Payment method callback: settings form.
 */
function commerce_globalone_cc_settings_form($settings = NULL) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  $settings = (array) $settings + commerce_globalone_cc_default_settings();

  $form = array();

  $form['mode'] = array(
    '#type' => 'select',
    '#title' => t('Choose Transaction mode'),
    '#description' => t('live or test'),
    '#default_value' => $settings['mode'],
    '#options' => array(
      'test' => t('Test'), 
      'live' => t('Live'), 
    ),
    '#required' => TRUE,
  );
  $form['test'] = array(
    '#type' => 'container',
    '#title' => t('test cards'),
    '#collapsible' => TRUE,
    '#collapsed' => FALSE,
    '#states' => array(
      'visible' => array(
        ':input[id="edit-parameter-payment-method-settings-payment-method-settings-mode"]' => array('value' => 'test'),
      ),
    ),
  );
  $variables = array(
    'items' => array(
      '<b>Visa</b>  4444333322221111',
      '<b>MasterCard</b> 5404000000000001',
      '<b>Visa Debit</b> 4462000000000003',
      '<b>Debit MasterCard</b> 5573470089010012',
      '<b>American Express</b> 374200000000004',
      '<b>JCB</b> 3569990000000009',
      '<b>Diners</b> 36000000000008',
    ),
    'type' => 'ol',
  );

  $form['test']['cards_info'] = array(
    '#type' => 'fieldset',
    '#title' => t('Test cards numbers'),
    '#collapsible' => TRUE,
    '#collapsed' => TRUE,
  );
  $form['test']['cards_info']['cards_no'] = array(
    '#markup' => theme('item_list', $variables) . t('CVV is 3 for all but amex is 4'),
  );
  $form['test']['terminal_id'] = array(
    '#type' => 'select',
    '#title' => t('Test mode currency'),
    '#default_value' => $settings['test']['terminal_id'],
    '#options' => array(
      '33001' => t('USD'), 
      '33002' => t('CAD'), 
      '33003' => t('EUR'), 
      '33004' => t('GBP'), 
      '36001' => t('Multi Currency'), 
    ),
  );
  $form['live'] = array(
    '#type' => 'container',
    '#title' => t('Live terminal info'),
    '#states' => array(
      'visible' => array(
        ':input[id="edit-parameter-payment-method-settings-payment-method-settings-mode"]' => array('value' => 'live'),
      ),
    ),
  );
  $form['live']['currency'] = array(
    '#type' => 'textfield',
    '#title' => t('Currency'),
    '#default_value' => $settings['live']['currency'],
  );
  $form['live']['terminal_id'] = array(
    '#type' => 'textfield',
    '#title' => t('Terminal ID'),
    '#default_value' => $settings['live']['terminal_id'],
  );
  $form['live']['secret'] = array(
    '#type' => 'textfield',
    '#title' => t('Secret'),
    '#default_value' => $settings['live']['secret'],
  );
  $form['card_types'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Limit accepted credit cards to the following types'),
    '#description' => t('If you want to limit acceptable card types, you should only select those supported by your merchant account.') . '<br />' . t('If none are checked, any credit card type will be accepted.'),
    '#options' => commerce_payment_credit_card_types(),
    '#default_value' => $settings['card_types'],
  );
  if (module_exists('commerce_globalone_terminal')) {
    $form['terminal'] = array(
      '#type' => 'fieldset',
      '#title' => t('GlobalONE Terminal Payment'),
      '#collapsible' => TRUE,
      '#collapsed' => FALSE,
    );
    $form['terminal']['terminal_path'] = array(
      '#type' => 'textfield',
      '#title' => t('Terminal path'),
      '#default_value' => $settings['terminal']['terminal_path'],
      '#required' => TRUE,
    );
  }
  $form['log'] = array(
    '#type' => 'checkboxes',
    '#title' => t('Log the following messages for debugging'),
    '#options' => array(
      'request' => t('API request messages'),
      'response' => t('API response messages'),
    ),
    '#default_value' => $settings['log'],
  );

  return $form;
}

/**
 * Payment method callback: checkout form.
 */
function commerce_globalone_cc_submit_form($pane_values, $checkout_pane, $order, $owner = FALSE) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Prepare the fields to include on the credit card form.
  $fields = array(
    'code' => '',
  );
  // Add owner field if set $owner to true.
  if ($owner) {
    $fields['owner'] = '';
  }

  // Add the credit card types array if necessary.
  /* //move to validation.....
  if (isset($payment_method['settings']['card_types'])) {
    $card_types = array_diff(array_values($payment_method['settings']['card_types']), array(0));

    if (!empty($card_types)) {
      $fields['type'] = $card_types;
    }
  }
   */
  return commerce_payment_credit_card_form($fields);
}

/**
 * Payment method callback: checkout form validation.
 */
function commerce_globalone_cc_submit_form_validate($payment_method, $pane_form, $pane_values, $order, $form_parents = array()) {

  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');

  // Validate the credit card fields.
  $settings = array(
    'form_parents' => array_merge($form_parents, array('credit_card')),
  );
  if (!commerce_payment_credit_card_validate($pane_values['credit_card'], $settings)) {
    return FALSE;
  }
}

/**
 * Create new transaction.
 *
 function commerce_globalone_new_transaction($transaction_data) {

   $transaction = commerce_payment_transaction_new('globalone', $transaction_data['order_id']);
   $transaction->instance_id = $transaction_data['payment_method']['instance_id'];
   $transaction->remote_id = 'dd';
   $transaction->amount = $transaction_data['charge']['amount'];
   $transaction->currency_code = $transaction_data['charge']['currency_code'];
   $transaction->payload[REQUEST_TIME] = 'dfd';

   $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
   // Store the type of transaction in the remote status.
   $transaction->remote_status = 'asdfds';

   // Build a meaningful response message.
   $message = array(
     'message',
   );

   $transaction->message = implode('<br />', $message);

   // Save the transaction information.
   commerce_payment_transaction_save($transaction);

}
 */

/**
 * Payment method callback: checkout form submission.
 */
function commerce_globalone_cc_submit_form_submit($payment_method, $pane_form, $pane_values, $order, $charge = NULL) {
  module_load_include('inc', 'commerce_payment', 'includes/commerce_payment.credit_card');
  $payment_settings = $payment_method['settings'];
  $credit_card = $pane_values['credit_card'];
  // Format order total for transaction.
  if (!isset($charge)) {
    $wrapper = entity_metadata_wrapper('commerce_order', $order);
    $charge = commerce_line_items_total($wrapper->commerce_line_items);
  }

  $params = array();
  $params['ORDERID'] = $order->order_id;
  $params['AMOUNT'] = commerce_currency_amount_to_decimal($charge['amount'],$charge['currency_code']) ;
  $params['CURRENCY'] = $charge['currency_code'];
  $params['CARDNUMBER'] = $credit_card['number'];
  $params['CARDHOLDERNAME'] = $credit_card['owner'];
  $params['MONTH'] = $credit_card['exp_month'];
  $params['YEAR'] = $credit_card['exp_year'];
  $params['CVV'] = $credit_card['code'];

  // Credit card type.
  if (empty($credit_card['valid_types'])) {
    $credit_card_types =  commerce_payment_credit_card_types();
    $credit_card['valid_types'] =  array_keys($credit_card_types);
  }
  $params['CARDTYPE'] = commerce_payment_validate_credit_card_type($credit_card['number'], $credit_card['valid_types']);

  $terminal = $payment_settings['mode'] == 'live' ?  _commmerce_globalone_get_live_terminal_info($payment_settings['live']) : _commmerce_globalone_get_test_terminal_info($payment_settings['test']['terminal_id']);


  $globalone_post = new CommerceGlobalonePost($terminal, $params);
  if ($payment_settings['log']['response']) {
    $globalone_post->logResponse();
  }
  if ($payment_settings['log']['request']) {
    $globalone_post->logRequest();
  }

  $response = $globalone_post->sendPayment();

  $transaction = commerce_payment_transaction_new('globalone', $order->order_id);

  // Check if all good.
  if (!$response['STATUS']) {
    $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;

    $transaction->message = !empty($response['ERRORSTRING']) ? check_plain($response['ERRORSTRING']) :  t('something went completlly wrong.');
    commerce_payment_transaction_save($transaction);
    drupal_set_message(t('We received the following error processing your card. Please enter your information again or try a different card.'), 'error');
    drupal_set_message($transaction->message, 'error');
    return FALSE;
  } 

  $transaction->instance_id = $payment_method['instance_id'];
  $transaction->remote_id = $response['UNIQUEREF'];
  $transaction->amount = $charge['amount'];
  $transaction->currency_code = $charge['currency_code'];
  $transaction->payload[REQUEST_TIME] = $response;
  $transaction->remote_status = $response['RESPONSETEXT'];

  switch ($response['RESPONSECODE']) {
    // Approved.
  case 'A':
    $transaction->status = COMMERCE_PAYMENT_STATUS_SUCCESS;
    $transaction->message = t('Payment complete.');
    break;

    // Referred.
  case 'R':
    $transaction->status = COMMERCE_PAYMENT_STATUS_PENDING;
    $transaction->message = t('The payment gateway referred authorisation.');
    break;

    // Declined or unknown.
  case 'D':
  default:
  $transaction->status = COMMERCE_PAYMENT_STATUS_FAILURE;
  $transaction->message = t('The payment failed with the response: @response.', array(
    '@response' => $response['RESPONSETEXT'],
  ));
  break;
  }

  // Save the transaction information.
  commerce_payment_transaction_save($transaction);

  if ($response['RESPONSECODE'] != 'A') {
    drupal_set_message(t('We received the following error processing your card. Please enter your information again or try a different card.'), 'error');
    drupal_set_message($transaction->message, 'error');
    return FALSE;
  }
}

/**
 * Return live terminal.
 *
 * @param $terminal_id
 *  The terminal id to get details for.
 *
 * @return
 *  Array with 'url', currency
 *
 *
 */
function _commmerce_globalone_get_live_terminal_info($live_terminal) {
  $terminal = array(
    'url' => GLOBALONE_LIVE_URL,
    'currency' => $live_terminal['currency'],
    'terminal_id' => $live_terminal['terminal_id'],
    'secret' => $live_terminal['secret'],
    'mode' => 'live',
  );
  return $terminal;
}

/**
 * Return test terminals.
 *
 * @param $terminal_id
 *  The terminal id to get details for.
 *
 * @return
 *  Array with 'url', currency
 *
 *
 */
function _commmerce_globalone_get_test_terminal_info($terminal_id) {
  $test_terminals = array(
    '33001' => array(
      'url' => GLOBALONE_TEST_URL,
      'terminal_id' => '33001',
      'currency' => 'USD',
      'secret' => 'SandboxSecret001',
      'mode' => 'test',
    ),
    '33002' => array(
      'url' => GLOBALONE_TEST_URL,
      'terminal_id' => '33002',
      'currency' => 'CAD',
      'secret' => 'SandboxSecret002',
      'mode' => 'test',
    ),
    '33003' => array(
      'url' => GLOBALONE_TEST_URL,
      'terminal_id' => '33003',
      'currency' => 'EUR',
      'secret' => 'SandboxSecret003',
      'mode' => 'test',
    ),
    '33004' => array(
      'url' => GLOBALONE_TEST_URL,
      'terminal_id' => '33004',
      'currency' => 'GBP',
      'secret' => 'SandboxSecret004',
      'mode' => 'test',
    ),
    '36001' => array(
      'url' => GLOBALONE_TEST_URL,
      'terminal_id' => '36001',
      'currency' => 'MCP',
      'secret' => 'SandboxSecret001',
      'mode' => 'test',
    ),
  );
  return $test_terminals[$terminal_id];
}
